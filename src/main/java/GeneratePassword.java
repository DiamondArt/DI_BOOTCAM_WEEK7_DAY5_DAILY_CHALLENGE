import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.text.RandomStringGenerator;
import static org.apache.commons.text.CharacterPredicates.DIGITS;
public class GeneratePassword {
    public static void main(String args[]) {

        // call generateSecurePassword() method to generate random password using RandomStringGenerator
        String pass = generateSecurePassword();
        System.out.println("Password generated by RandomStringGenerator is:"+pass);
        //RandomStringGenerator characterGenerator = new RandomStringGenerator.Builder().
         //       withinRange(10, 100).filteredBy().build();
       // System.out.println("Generate value "+characterGenerator.generate(2));

    }

    public static String generateSecurePassword() {

        // generate a string that contains 2 special chars, 2 numbers, 2 uppercase and 2 lower case
        String demoPassword = generateRandomSpecialCharacters(2)
                .concat(generateRandomNumbers(2))
                .concat(generateRandomAlphabet(2, true))
                .concat(generateRandomAlphabet(2, false));

        // create a list of Char that stores all the characters, numbers and special characters
        List<Character> listOfChar = demoPassword.chars()
                .mapToObj(data -> (char) data).collect(Collectors.toList());

        // melanger les characters
        Collections.shuffle(listOfChar);

        //generate a random string(secure password) by using list stream() method and collect() method
        String password = listOfChar.stream()
                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
                .toString();
        return password;
    }


    /*
     * Return a random digit number
     * @param int length
     * @return String value
     */
    public static String generateRandomSpecialCharacters(int length) {

        RandomStringGenerator characterGenerator = new RandomStringGenerator.Builder().
                withinRange(10, 100).build();

        return characterGenerator.generate(length);

    }

    /*
     * Return a random digit number with length giving in argument
     * @param int length
     * @return String value
     */
    public static String generateRandomNumbers(int length) {

        RandomStringGenerator numberGenerator = new RandomStringGenerator.Builder()
                .withinRange('0', 'z')
                .filteredBy(DIGITS) // only digit value between in range
                .build();
        return numberGenerator.generate(length);

    }


    /*
    * Return a random alphabet in format lower case or upper case
    * @param int length
    * @param boolean formatLetter
    * @return String value
    */
    public static String generateRandomAlphabet(int length, boolean formatLetter) {

        String randomLetter;

        // for lowerCase string
        if(formatLetter == true) {
            RandomStringGenerator generator = new RandomStringGenerator.Builder().withinRange('a', 'z')
                    .build();
            randomLetter = generator.generate(length);
        }
        // for upperCase string
        else {
            RandomStringGenerator generator = new RandomStringGenerator.Builder().withinRange('A', 'Z')
                    .build();
            randomLetter = generator.generate(length);
        }

        return randomLetter;
    }
}
